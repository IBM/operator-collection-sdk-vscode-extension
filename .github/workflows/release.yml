name: Release

on:
  push:
    tags:
      - "**"

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Determine tag
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"

      - name: Check-out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.RELEASE_TAG }}

      - name: Git origin branch
        run: |
          TAG_COMMIT=$(git rev-list -n 1 ${RELEASE_TAG})
          echo "ORIGIN_BRANCH=$(git branch -r --contains ${TAG_COMMIT} | grep -e '->' | awk '{ print $3}')" >> $GITHUB_ENV

      - name: Install Node.js
        uses: actions/setup-node@v3
        with: 
            node-version: latest
      - name: NPM Install
        run: npm install
      
      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Build Extension
        if: ${{ env.ORIGIN_BRANCH == 'origin/main' }}
        run: |
          npm run build
          echo "EXTENSION_LOCATION=$(ls ${GITHUB_WORKSPACE}/*.vsix)" >> $GITHUB_ENV

      - name: Build Pre-Release Extension
        if: ${{ env.ORIGIN_BRANCH != origin/main }}
        run: |
          npm run build-prerelease
          echo "EXTENSION_LOCATION=$(ls ${GITHUB_WORKSPACE}/*.vsix)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: oc-sdk-extension
          path: ${{ env.EXTENSION_LOCATION }}
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Determine tag
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"

      - name: Check-out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.RELEASE_TAG }}

      - name: Create release
        uses: actions/github-script@v6
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
        
      - uses: actions/download-artifact@v2
        with:
          name: oc-sdk-extension
          path: ~/download/extension

      - name: Upload Extension to GitHub
        run: |
          gh release upload ${RELEASE_TAG} ~/download/extension/$(ls ~/download/extension)
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}

